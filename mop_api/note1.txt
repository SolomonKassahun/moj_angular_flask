import re
from flask import Flask,render_template, url_for, flash, redirect, request, jsonify
from flask_marshmallow import Marshmallow
from flask_restplus import Resource,Api,fields,Namespace, namespace
from sqlalchemy import true
from werkzeug.utils import cached_property
from flask_cors import CORS

from setting import *
from models import *
from marsh import *

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = SQLALCHEMY_DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = SQLALCHEMY_TRACK_MODIFICATIONS
CORS(app)
db.init_app(app) # initialize

marsh = Marshmallow(app)

user_schema = UserSchema()
users_schema = UserSchema(many = true)

vehicle_info_schema = VehicleInfoSchema()
vehicles_info_schema= VehicleInfoSchema(many = true)



api = Api(app,version="1",title="Vehicle App Database",description="Vehicle Information")
list_of_names = {}

User = api.model("User",{
    'username':fields.String("username"),
    'password':fields.String("password")
})
Vehicle  = api.model("Vehicle ",{
    'vehicleType':fields.String("vehicle Type"),
    'vehicleMake':fields.String(" vehicle Make"),
    'vehicleModel':fields.String('vehicle Model'),
    'vehicleRegistration':fields.String("vehicle Registratio"),
    'motDate':fields.DateTime("MOT Date"),
    'motExpiredDate':fields.DateTime("No MOT Added"),
    'garageUsedMot':fields.String('garage Used Mot'),
    'serviceDate':fields.DateTime("Service Date"),
    'serviceExpiredDate':fields.DateTime("No Service Added."),
    'garageUsedService':fields.String('garage Used Service'),
    'insuranceDate':fields.DateTime("insurance Date"),
    'insuranceExpiredDate':fields.DateTime(" No Insurance Added."),
    'insuranceCompany':fields.String('insurance Company'),
    'insuranceType':fields.String(' insurance Type'),
})
#name_space = Namespace('names', description='Manage names')
#namespace = app.name("names",description='Manage names')

@api.route("/api/userlogin")
class UserResource(Resource):
    def get(self):
        # this is the redirection to after the user is logedin
        user = User.query.all()
        return users_schema.dump(user)
    @api.expect(User)
    #@api.response(201,"Successfuly created new logedin!")
    def post(self):
        # this is for submiting the form to check the tokens
        users = User()
        # print(request.json['UserId'])
        if request.is_json:
            username = request.json['username']
            password = request.json['password']
        else:
            username = request.form['username']
            password = request.form['password']
        test=User.query.filter_by(username=username, password=password).first()
        
        if test is None:
            # access_token = create_access_token(identity=email)
            # , access_token=access_token
            print('eeeeeeeeeeeee')
            return "Wrong email or password", 401 
            
        else:
            print("sol")
            return jsonify(message="login successful",username=username,password=password)

@api.route("/api/vehicleInfo",methods=['GET', 'POST'])
class UserResource(Resource):
    def get(self):
        try:
             vehicleType  =  list_of_names[0]
             vehicleMake = list_of_names[1]
             vehicleModel:  list_of_names[2]
             vehicleRegistration:   list_of_names[3]
             motDate:  list_of_names[4]
             motExpiredDate:   list_of_names[5]
             garageUsedMot:  list_of_names[6]
             serviceDate:   list_of_names[7]
             serviceExpiredDate:  list_of_names[8]
             garageUsedService:   list_of_names[9]
             insuranceDate:  list_of_names[10]
             insuranceExpiredDate:   list_of_names[11]
             insuranceCompany:  list_of_names[12]
             insuranceType:   list_of_names[13]
             return {
                "vehicleType":  list_of_names[0],
                "vehicleMake":   list_of_names[1],
                "vehicleModel":  list_of_names[2],
                "vehicleRegistration":   list_of_names[3],
                "motDate":  list_of_names[4],
                "motExpiredDate":   list_of_names[5],
                "garageUsedMot":  list_of_names[6],
                "serviceDate":   list_of_names[7],
                "serviceExpiredDate":  list_of_names[8],
                "garageUsedService":   list_of_names[9],
                "insuranceDate":  list_of_names[10],
                "insuranceExpiredDate":   list_of_names[11],
                "insuranceCompany":  list_of_names[12],
                "insuranceType":   list_of_names[13],
                 
             }
        except KeyError as e:
            #name_space.abort(500, e.__doc__, status = "Could not save information", statusCode = "500")
            print("error 1st occured")
        except Exception as e:
            #name_space.abort(400, e.__doc__, status = "Could not save information", statusCode = "400")
            print("error 2nd occured")
        
        
    @api.expect(Vehicle)
    @api.response(201,"Successfuly created new logedin!")
    def post(self):
        try:
            list_of_names[0] = request.json['vehicleType']
            list_of_names[1] = request.json['vehicleMake']
            list_of_names[2] = request.json['vehicleModel']
            list_of_names[3] = request.json['vehicleRegistration']
            list_of_names[4] = request.json['motDate']
            list_of_names[5] = request.json['motExpiredDate']
            list_of_names[6] = request.json['garageUsedMot']
            list_of_names[7] = request.json['serviceDate']
            list_of_names[8] = request.json['serviceExpiredDate']
            list_of_names[9] = request.json['garageUsedService']
            list_of_names[10] = request.json['insuranceDate']
            list_of_names[11] = request.json['insuranceExpiredDate']
            list_of_names[12] = request.json['insuranceCompany']
            list_of_names[13] = request.json['insuranceType']
           
            for i in range(14):
                db.session.add( list_of_names[i])
            db.session.commit()
            return {
                "vehicleType":  list_of_names[0],
                "vehicleMake":   list_of_names[1],
                "vehicleModel":  list_of_names[2],
                "vehicleRegistration":   list_of_names[3],
                "motDate":  list_of_names[4],
                "motExpiredDate":   list_of_names[5],
                "garageUsedMot":  list_of_names[6],
                "serviceDate":   list_of_names[7],
                "serviceExpiredDate":  list_of_names[8],
                "garageUsedService":   list_of_names[9],
                "insuranceDate":  list_of_names[10],
                "insuranceExpiredDate":   list_of_names[11],
                "insuranceCompany":  list_of_names[12],
                "insuranceType":   list_of_names[13],
               # "vehicleModel":  list_of_names[" vehicleModel"]
            }
           
        except KeyError as e:
            #name_space.abort(500, e.__doc__, status = "Could not save information", statusCode = "500")
            print("error 1st occured")
        except Exception as e:
            #name_space.abort(400, e.__doc__, status = "Could not save information", statusCode = "400")
            print("error 2nd occured")


       
           
    